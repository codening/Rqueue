#!/usr/bin/env php
<?php
define("DS", DIRECTORY_SEPARATOR);
define("RQUEUE_ROOT_DIR", __DIR__);
define("RQUEUE_WORK_DIR", RQUEUE_ROOT_DIR.DS."Workers".DS);

define('IPC_KEY', fileinode(RQUEUE_ROOT_DIR));
define('DEFAULT_SHM_SIZE', 393216);

try {
	include(RQUEUE_ROOT_DIR.DS."Lib".DS."Rlog".DS."Rlog.php");

	include(RQUEUE_ROOT_DIR.DS."Lib".DS."Config.php");

	// 载入work基类
	include(RQUEUE_ROOT_DIR.DS."Lib".DS."Rqueue.php");

	$Rlog = Rlog::instance(array('DRIVER'=>'file', 'LOG_PATH'=>RQUEUE_ROOT_DIR.DS."logs", 'LOG_MULTI'=>false));
	// $Rlog->debug('server',"nihaowa");

	if(empty($argv[1]))
	{
	    echo "Usage: Rqueue {start|stop|restart|reload|kill|status}".PHP_EOL;
	    exit;
	}

	$cmd = $argv[1];

	if(0 === strpos(strtolower(PHP_OS), 'win'))
	{
	    exit("Rqueue can not run on Windows operating system".PHP_EOL);
	}

	if (version_compare(PHP_VERSION,'5.3.0','<'))
	{
	    exit("Rqueue PHP >= 5.3.0 required ".PHP_EOL);
	}

	// 获取配置文件实例
	Config::instance();
	if(!($pid_file = Config::get('Rqueue.pid_file')))
	{
	    $pid_file = RQUEUE_ROOT_DIR.DS."temp".DS."rqueue.pid";
	}
	define('RQUEUE_PID_FILE', $pid_file);

	// ==log-dir==
	if(!($log_dir = Config::get('Rqueue.log_dir')))
	{
	    $log_dir = RQUEUE_ROOT_DIR.DS."logs";
	}
	define('RQUEUE_LOG_DIR', $log_dir . '/');

	//检查pid对应的进程是否存在，不存在删除PID文件
	if($cmd != 'status' && is_file(RQUEUE_PID_FILE))
	{
	    //检查权限
	    if(!posix_access(RQUEUE_PID_FILE, POSIX_W_OK))
	    {
	        if($stat = stat(RQUEUE_PID_FILE))
	        {
	            if(($start_pwuid = posix_getpwuid($stat['uid'])) && ($current_pwuid = posix_getpwuid(posix_getuid())))
	            {
	                exit("\n\033[31;40mRqueued is started by user {$start_pwuid['name']}, {$current_pwuid['name']} can not $cmd Workerman, Permission denied\033[0m\n\n\033[31;40mRqueued $cmd failed\033[0m\n\n");
	            }
	        }
	        exit("\033[31;40mCan not $cmd Rqueue, Permission denied\033[0m\n");
	    }
	    //检查pid进程是否存在
	    if($pid = @file_get_contents(RQUEUE_PID_FILE))
	    {
	        if(false === posix_kill($pid, 0))
	        {
	            if(!unlink(RQUEUE_PID_FILE))
	            {
	                exit("\033[31;40mCan not $cmd Rqueue\033[0m\n\n");
	            }
	        }
	    }
	}

	// 必须是root启动
	if($user_info = posix_getpwuid(posix_getuid()))
	{
	    if($user_info['name'] !== 'root')
	    {
	        exit("\033[31;40mYou should ran Rqueue as root , Permission denied\033[0m\n");
	    }
	}

	switch ($cmd) {
		case 'start':
			// $workers_file = get_worker_file();
			// 设置log日志
			Rqueue::set_log($Rlog);
			Rqueue::run();
			break;
		case 'stop':
			$pid = @file_get_contents(RQUEUE_PID_FILE);
	        if(empty($pid))
	        {
	            exit("\033[33;40mRqueued not running?\033[0m\n");
	        }
	        stop_and_wait();
			break;
		case 'reload':
			$pid = @file_get_contents(RQUEUE_PID_FILE);
	        if(empty($pid))
	        {
	            exit("\033[33;40mRqueued not running?\033[0m\n");
	        }

			posix_kill($pid, SIGHUP);
			echo "reload Rqueued\n";
			break;
		case 'status':
			var_dump(Rqueue::$pid_workers);
			break;
		default:
			# code...
			break;
	}
	// $Rlog->debug('server', $cmd);

}

catch(Exception $e) {
	echo $e->getMessage();
}

function stop_and_wait($wait_time = 6)
{
    $pid = @file_get_contents(RQUEUE_PID_FILE);
    if(empty($pid))
    {
        //exit("server not running?\n");
    }
    else
    {
        $start_time = time();
        posix_kill($pid, SIGINT);
        while(is_file(RQUEUE_PID_FILE))
        {
            clearstatcache();
            usleep(1000);
            if(time()-$start_time >= $wait_time)
            {
                force_kill();
                force_kill();
                unlink(RQUEUE_PID_FILE);
                usleep(500000);
                break;
            }
        }
        echo "Rqueue is stoped".PHP_EOL;
    }
}

function force_kill()
{
    $ret = $match = array();
    exec("ps aux | grep -E 'Rqueued' | grep -v grep", $ret);
    $this_pid = posix_getpid();
    $this_ppid = posix_getppid();
    foreach($ret as $line)
    {
        if(preg_match("/^[\S]+\s+(\d+)\s+/", $line, $match))
        {
            $tmp_pid = $match[1];
            if($this_pid != $tmp_pid && $this_ppid != $tmp_pid)
            {
                posix_kill($tmp_pid, SIGKILL);
            }
        }
    }
}

function get_worker_file()
{
	if (!is_dir(RQUEUE_WORK_DIR)) exit(RQUEUE_WORK_DIR." dir is not found.");
	$Workers = array();
	$_Workers = scandir(RQUEUE_WORK_DIR);
	foreach ($_Workers as $file) {
		if (is_file(RQUEUE_WORK_DIR.DS.$file)) {
			$Workers[] = $file;
		}
	}
	if (empty($Workers)) exit(RQUEUE_WORK_DIR." is not found file");
	return $Workers;
}